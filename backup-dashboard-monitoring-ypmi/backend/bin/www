#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("dotenv").config();
const app = require("../app");
const debug = require("debug")("backend:server");
const http = require("http");
const logger = require("../logger");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Initialize a new instance of socket.io by
 * passing the server (the HTTP server) object
 */
const { Server } = require("socket.io");

const { event, cronJob } = require("../modules");
const io = new Server(server, {
  cors: {
    origin: process.env.CLIENT_URL,
  },
});

// Whenever someone connects this gets executed
io.on("connection", function (socket) {
  logger.info("[connection] User connected to socket");

  // Scan image directory
  socket.on("scan_img_dir", (msg) => {
    console.log("[scan_img_dir] check image message: ", msg);
    event.scanImgDir(io, msg);
  });
  socket.on("scan_img_save", (msg) => {
    logger.info(
      `[scan_img_save] User called socket to save image: ${JSON.stringify(msg)}`
    );
    event.scanImgSave(io, msg);
  });


  // Whenever someone disconnects this piece of code executed
  socket.on("disconnect", function () {
    socket.disconnect();
    socket.removeAllListeners();
    socket = null;
    logger.info("[disconnect] User disconnected from socket");
  });
});

cronJob.runJob(io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
  debug("Listening on " + bind);
}
